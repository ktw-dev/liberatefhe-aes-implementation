#!/usr/bin/env python3
"""
AES-128 Implementation following NIST FIPS 197
Pure Python implementation with selective NumPy vectorization for structural clarity.
This code serves as a 'ground truth' reference for the FHE implementation.
Speed optimization is not a primary goal; correctness and clarity are.
"""
import numpy as np

# 1. Constants Definition

# S-Box and Inverse S-Box, pre-converted to NumPy arrays for efficient lookups
S_BOX = np.array([
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
], dtype=np.uint8)

INV_S_BOX = np.array([
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
], dtype=np.uint8)

# Round constants for key expansion
RCON = np.array([
    [0x01, 0x00, 0x00, 0x00], [0x02, 0x00, 0x00, 0x00], [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00], [0x10, 0x00, 0x00, 0x00], [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00], [0x80, 0x00, 0x00, 0x00], [0x1b, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00]
], dtype=np.uint8)


# 2. Core Transformation Functions

def sub_bytes(state):
    """Substitute each byte in the state matrix using S-Box.
    This is vectorized using NumPy for structural alignment with FHE operations.
    """
    return S_BOX[state]

def inv_sub_bytes(state):
    """Inverse substitute each byte using INV_S_BOX. Vectorized with NumPy."""
    return INV_S_BOX[state]

def shift_rows(state):
    """Shift each row of the state matrix to the left. Vectorized with NumPy."""
    state[1, :] = np.roll(state[1, :], -1)
    state[2, :] = np.roll(state[2, :], -2)
    state[3, :] = np.roll(state[3, :], -3)
    return state

def inv_shift_rows(state):
    """Shift each row of the state matrix to the right. Vectorized with NumPy."""
    state[1, :] = np.roll(state[1, :], 1)
    state[2, :] = np.roll(state[2, :], 2)
    state[3, :] = np.roll(state[3, :], 3)
    return state

def mix_columns(state):
    """Mix columns of the state matrix using finite field multiplication.
    Pure Python implementation is kept for logical clarity.
    """
    def xtime(a):
        return (((a << 1) ^ 0x1b) & 0xff) if (a & 0x80) else (a << 1)
    
    for i in range(4):
        c0, c1, c2, c3 = state[:, i]
        state[0, i] = xtime(c0 ^ c1) ^ (c0 ^ c1 ^ c2 ^ c3) ^ c0
        state[1, i] = xtime(c1 ^ c2) ^ (c0 ^ c1 ^ c2 ^ c3) ^ c1
        state[2, i] = xtime(c2 ^ c3) ^ (c0 ^ c1 ^ c2 ^ c3) ^ c2
        state[3, i] = xtime(c3 ^ c0) ^ (c0 ^ c1 ^ c2 ^ c3) ^ c3
    return state

def inv_mix_columns(state):
    """Inverse mix columns operation. Pure Python for clarity."""
    def xtime(a):
        return (((a << 1) ^ 0x1b) & 0xff) if (a & 0x80) else (a << 1)

    def multiply_by(a, b):
        # A more efficient way to multiply in GF(2^8)
        p = 0
        if b & 1: p ^= a
        if b & 2: p ^= xtime(a)
        if b & 4: p ^= xtime(xtime(a))
        if b & 8: p ^= xtime(xtime(xtime(a)))
        return p

    for i in range(4):
        c0, c1, c2, c3 = state[:, i]
        state[0, i] = multiply_by(c0, 0x0e) ^ multiply_by(c1, 0x0b) ^ multiply_by(c2, 0x0d) ^ multiply_by(c3, 0x09)
        state[1, i] = multiply_by(c0, 0x09) ^ multiply_by(c1, 0x0e) ^ multiply_by(c2, 0x0b) ^ multiply_by(c3, 0x0d)
        state[2, i] = multiply_by(c0, 0x0d) ^ multiply_by(c1, 0x09) ^ multiply_by(c2, 0x0e) ^ multiply_by(c3, 0x0b)
        state[3, i] = multiply_by(c0, 0x0b) ^ multiply_by(c1, 0x0d) ^ multiply_by(c2, 0x09) ^ multiply_by(c3, 0x0e)
    return state

def add_round_key(state, round_key):
    """XOR the state matrix with the round key. Vectorized with NumPy."""
    return state ^ round_key


# 3. Key Expansion Function (using NumPy)
def key_expansion(key: bytes) -> np.ndarray:
    """Expand 128-bit key into 11 round keys (4x4 matrices)."""
    key_matrix = np.frombuffer(key, dtype=np.uint8).reshape(4, 4).T
    
    round_keys = np.zeros((11, 4, 4), dtype=np.uint8)
    round_keys[0] = key_matrix
    
    for i in range(1, 11):
        prev_key = round_keys[i-1]
        temp = prev_key[:, 3]
        
        # RotWord and SubWord
        temp = np.roll(temp, -1)
        temp = S_BOX[temp]
        
        # Rcon XOR
        temp[0] ^= RCON[i-1, 0]
        
        # XOR with previous key columns
        new_key = np.zeros((4, 4), dtype=np.uint8)
        new_key[:, 0] = prev_key[:, 0] ^ temp
        new_key[:, 1] = prev_key[:, 1] ^ new_key[:, 0]
        new_key[:, 2] = prev_key[:, 2] ^ new_key[:, 1]
        new_key[:, 3] = prev_key[:, 3] ^ new_key[:, 2]
        
        round_keys[i] = new_key
        
    return round_keys


# 4. Main Encryption/Decryption Functions
def encrypt(plaintext: bytes, key: bytes) -> bytes:
    """Encrypt 128-bit plaintext with 128-bit key."""
    # Generate round keys
    round_keys = key_expansion(key)
    
    # Convert plaintext to state matrix
    state = np.frombuffer(plaintext, dtype=np.uint8).reshape(4, 4).T

    # Initial round
    state = add_round_key(state, round_keys[0])
    
    # Main rounds (1-9)
    for i in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[i])
    
    # Final round (10)
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[10])
    
    # Convert state matrix to ciphertext
    return state.T.tobytes()

def decrypt(ciphertext: bytes, key: bytes) -> bytes:
    """Decrypt 128-bit ciphertext with 128-bit key."""
    # Generate round keys
    round_keys = key_expansion(key)
    
    # Convert ciphertext to state matrix
    state = np.frombuffer(ciphertext, dtype=np.uint8).reshape(4, 4).T

    # Initial round
    state = add_round_key(state, round_keys[10])
    
    # Main rounds (9-1)
    for i in range(9, 0, -1):
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)
        state = add_round_key(state, round_keys[i])
        state = inv_mix_columns(state)
    
    # Final round
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)
    state = add_round_key(state, round_keys[0])
    
    # Convert state matrix to plaintext
    return state.T.tobytes()


# 5. Execution and Validation Code
def _run_test_vector(test_name: str, key: bytes, plaintext: bytes, expected: bytes):
    """Helper function to run and validate a single test case."""
    print(f"\n--- Running Test: {test_name} ---")
    print(f"Key:        {key.hex()}")
    print(f"Plaintext:  {plaintext.hex()}")
    
    # Encrypt and verify
    ciphertext = encrypt(plaintext, key)
    print(f"Ciphertext: {ciphertext.hex()}")
    print(f"Expected:   {expected.hex()}")
    assert ciphertext == expected, "Encryption FAILED!"
    print("✓ Encryption test PASSED!")
    
    # Decrypt and verify
    decrypted = decrypt(ciphertext, key)
    assert decrypted == plaintext, "Decryption FAILED!"
    print("✓ Decryption test PASSED!")

if __name__ == '__main__':
    print("=" * 50)
    print("AES-128 Implementation Validation")
    print("=" * 50)

    # Test Case 1: NIST FIPS 197, Appendix B
    _run_test_vector(
        test_name="NIST FIPS 197 Appendix B",
        key=bytes.fromhex("2b7e151628aed2a6abf7158809cf4f3c"),
        plaintext=bytes.fromhex("3243f6a8885a308d313198a2e0370734"),
        expected=bytes.fromhex("3925841d02dc09fbdc118597196a0b32")
    )
    
    # Test Case 2: NIST FIPS 197, Appendix C.1 (AES-128)
    _run_test_vector(
        test_name="NIST FIPS 197 Appendix C.1",
        key=bytes.fromhex("000102030405060708090a0b0c0d0e0f"),
        plaintext=bytes.fromhex("00112233445566778899aabbccddeeff"),
        expected=bytes.fromhex("69c4e0d86a7b0430d8cdb78070b4c55a")
    )

    print("\n\n✓ All AES-128 test vectors successfully validated!")