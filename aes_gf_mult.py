"""
aes_gf_mult.py – Homomorphic nibble-wise GF(2^8) ×2 and x3 using ζ-domain 2-var polynomials and xor.

This module evaluates two 16×16 monomial polynomials (upper-nibble, lower-nibble)
whose coefficients were generated by gf_mult_2_coeff.py.

API
---
    hi_ct, lo_ct = gf_mul2(context, ct_hi, ct_lo)
where `ct_hi` / `ct_lo` encrypt ζ^{x_hi}, ζ^{x_lo} for 4-bit inputs.
The outputs encrypt ζ^{y_hi}, ζ^{y_lo} where y = (2·x) mod 256.
"""
from __future__ import annotations

import json
from pathlib import Path
from typing import Any, Dict, Tuple

import numpy as np

from aes_xor import build_power_basis
from engine_context import CKKS_EngineContext

_THIS_DIR = Path(__file__).resolve().parent


__all__ = ["gf_mul2"]

# -----------------------------------------------------------------------------
# Load coefficient tables (sparse)
# -----------------------------------------------------------------------------

def _load_coeff(name: str):
    path = _THIS_DIR / f"coeff/gf_mult2_{name}_coeffs.json"
    with open(path, "r", encoding="utf-8") as f:
        obj = json.load(f)
    entries = obj["entries"]
    return {(p, q): complex(re, im) for p, q, re, im in entries}

_COEFF_HI = _load_coeff("hi")
_COEFF_LO = _load_coeff("lo")

# -----------------------------------------------------------------------------
# Plaintext cache per engine id
# -----------------------------------------------------------------------------
_PT_CACHE: Dict[int, Dict[Tuple[int, int], Any]] = {}


def _get_coeff_plaintexts(engine, which: str):
    """Return dict[(p,q)] -> plaintext for given engine."""
    cache_key = (id(engine), which)
    if cache_key in _PT_CACHE:
        return _PT_CACHE[cache_key]

    coeffs = _COEFF_HI if which == "hi" else _COEFF_LO
    slot_cnt = engine.slot_count
    pt_dict: Dict[Tuple[int, int], Any] = {}
    for (p, q), c in coeffs.items():
        vec = np.full(slot_cnt, c, dtype=np.complex128)
        pt_dict[(p, q)] = engine.encode(vec)
    _PT_CACHE[cache_key] = pt_dict
    return pt_dict

# -----------------------------------------------------------------------------
# Evaluation helper
# -----------------------------------------------------------------------------

def _poly_eval(context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any, which: str):
    engine = context.get_engine()
    rlk = context.get_relinearization_key()
    conj_key = context.get_conjugation_key()

    # power basis X^p, Y^q
    basis_x = build_power_basis(engine, ct_hi, rlk, conj_key)  # 0..15
    basis_y = build_power_basis(engine, ct_lo, rlk, conj_key)

    coeff_pt = _get_coeff_plaintexts(engine, which)

    # init zero cipher
    cipher_res = engine.multiply(ct_hi, 0.0)

    for (p, q), pt in coeff_pt.items():
        term = engine.multiply(basis_x[p], basis_y[q], rlk)
        term = engine.multiply(term, pt)
        cipher_res = engine.add(cipher_res, term)

    return cipher_res

# -----------------------------------------------------------------------------
# Public API
# -----------------------------------------------------------------------------

def gf_mul_2(engine_context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any):
    """Return ciphertexts encrypting upper/lower nibbles of GF×2(x)."""
    hi_ct = _poly_eval(engine_context, ct_hi, ct_lo, "hi")
    lo_ct = _poly_eval(engine_context, ct_hi, ct_lo, "lo")
    return hi_ct, lo_ct

def gf_mul_3(engine_context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any):
    hi_ct = _poly_eval(engine_context, ct_hi, ct_lo, "hi")
    lo_ct = _poly_eval(engine_context, ct_hi, ct_lo, "lo")
    
    hi_ct = _xor_operation(engine_context, hi_ct, ct_hi)
    lo_ct = _xor_operation(engine_context, lo_ct, ct_lo)
    return hi_ct, lo_ct



















# -----------------------------------------------------------------------------
# Test functions
# -----------------------------------------------------------------------------
import time
import math
from aes_xor import _xor_operation

GF_MULT_2 = np.array([
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
], dtype=np.uint8)

def gf_mult_2_lookup(input_array):
    """
    방법 1: 룩업 테이블을 사용한 GF(2^8) × 2 곱셈
    Args:
        input_array: (16,) 모양의 numpy array, 각 원소는 0-255 범위의 정수
    
    Returns:
        numpy array: 각 원소를 GF(2^8)에서 2로 곱한 결과
    """
    input_array = np.asarray(input_array, dtype=np.uint8)
    # NumPy의 advanced indexing으로 벡터화된 룩업
    result = GF_MULT_2[input_array]
    return result

def int_to_zeta(arr: np.ndarray) -> np.ndarray:
    result = np.exp(-2j * np.pi * (arr % 16) / 16)
    return result

def zeta_to_int(zeta_arr: np.ndarray) -> np.ndarray:
    """Inverse of `transform_to_zeta` assuming unit-magnitude complex numbers.

    Values are mapped back to integers 0‥15 by measuring their phase.
    """
    angles = np.angle(zeta_arr)  # range (-π, π]
    k      = (-angles * 16) / (2 * np.pi)
    k      = np.mod(np.rint(k), 16).astype(np.uint8)
    return k

if __name__ == "__main__":
    engine_context = CKKS_EngineContext(signature=1, use_bootstrap=True, mode="parallel", thread_count=16, device_id=0)
    engine = engine_context.engine
    public_key = engine_context.public_key
    secret_key = engine_context.secret_key
    relinearization_key = engine_context.relinearization_key
    conjugation_key = engine_context.conjugation_key
    bootstrap_key = engine_context.bootstrap_key
    
    # 1. Encrypt inputs
    np.random.seed(42)
    alpha_int = np.random.randint(0, 16, size=32768, dtype=np.uint8)
    beta_int = np.random.randint(0, 16, size=32768, dtype=np.uint8)
    alpha_int_16 = alpha_int[:16]
    beta_int_16 = beta_int[:16]
    
    # 1-1. gf_mult_2 of alpha << 4 | beta int
    alpha_beta_int = (alpha_int_16 << 4) | beta_int_16
    alpha_beta_int_gf_mult_2 = gf_mult_2_lookup(alpha_beta_int)
    
    # 1-2. gf_mult_3 of alpha << 4 | beta int
    alpha_beta_int_gf_mult_3 = alpha_beta_int_gf_mult_2 ^ alpha_beta_int
    
    
    print(f"alpha_beta_int_gf_mult_2[:16]: {alpha_beta_int_gf_mult_2[:16]}")
    print(f"alpha_beta_int_gf_mult_3[:16]: {alpha_beta_int_gf_mult_3[:16]}")
    
    # 2. transform to zeta domain
    alpha_int_zeta = int_to_zeta(alpha_int)
    beta_int_zeta = int_to_zeta(beta_int)
    
    enc_alpha_int_zeta = engine.encrypt(alpha_int_zeta, public_key, level=10)
    enc_beta_int_zeta = engine.encrypt(beta_int_zeta, public_key, level=10)
    
    start_time = time.time()
    print("start gf_mul_2.level", enc_alpha_int_zeta.level)
    ct_hi, ct_lo = gf_mul_2(engine_context, enc_alpha_int_zeta, enc_beta_int_zeta)
    print("after gf_mul_2.level", ct_hi.level)
    end_time = time.time()
    print(f"gf_mul_2 time: {end_time - start_time} seconds")
    
    
    start_time = time.time()
    print("start gf_mul_3.level", enc_alpha_int_zeta.level)
    
    ct_hi, ct_lo = gf_mul_2(engine_context, enc_alpha_int_zeta, enc_beta_int_zeta)
    
    print("right after gf_mul_2.level", ct_hi.level)
    
    ct_hi_3 = _xor_operation(engine_context, ct_hi, enc_alpha_int_zeta)
    ct_lo_3 = _xor_operation(engine_context, ct_lo, enc_beta_int_zeta)
    
    print("gf_mul_3.level", ct_hi_3.level)
    
    end_time = time.time()
    
    print(f"gf_mul_3 time: {end_time - start_time} seconds")
    
    start_time = time.time()
    
    dec_ct_hi = engine.decrypt(ct_hi, secret_key)
    dec_ct_lo = engine.decrypt(ct_lo, secret_key)
    
    dec_ct_hi_3 = engine.decrypt(ct_hi_3, secret_key)
    dec_ct_lo_3 = engine.decrypt(ct_lo_3, secret_key)
    
    int_dec_ct_hi = zeta_to_int(dec_ct_hi)
    int_dec_ct_lo = zeta_to_int(dec_ct_lo)
    
    int_dec_ct_hi_3 = zeta_to_int(dec_ct_hi_3)
    int_dec_ct_lo_3 = zeta_to_int(dec_ct_lo_3)
    
    print(int_dec_ct_hi[:16] * 16)
    print(int_dec_ct_lo[:16])
    
    print(int_dec_ct_hi_3[:16] * 16)
    print(int_dec_ct_lo_3[:16])

    
    
    