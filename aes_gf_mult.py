"""
aes_gf_mult.py – Homomorphic nibble-wise GF(2^8) ×2 and x3 using ζ-domain 2-var polynomials and xor.

This module evaluates two 16×16 monomial polynomials (upper-nibble, lower-nibble)
whose coefficients were generated by gf_mult_2_coeff.py.

API
---
    hi_ct, lo_ct = gf_mul2(context, ct_hi, ct_lo)
where `ct_hi` / `ct_lo` encrypt ζ^{x_hi}, ζ^{x_lo} for 4-bit inputs.
The outputs encrypt ζ^{y_hi}, ζ^{y_lo} where y = (2·x) mod 256.
"""
from __future__ import annotations

import json
from pathlib import Path
from typing import Any, Dict, Tuple
import time
import math

import numpy as np

from aes_xor import build_power_basis
from engine_context import CKKS_EngineContext

_THIS_DIR = Path(__file__).resolve().parent


# -----------------------------------------------------------------------------
# Load coefficient tables for all supported multipliers
# -----------------------------------------------------------------------------

# Supported multipliers (AES MixColumns): 2, 3, 9, 11, 13, 14.

_MULTS_WITH_TABLE = (2, 3, 9, 11, 13, 14)


def _load_coeff(mult_val: int, which: str):
    """Load sparse coefficient table for GF×mult_val."""
    path = _THIS_DIR / f"coeffs/gf_mult{mult_val}_{which}_coeffs.json"
    with open(path, "r", encoding="utf-8") as f:
        obj = json.load(f)
    entries = obj["entries"]
    return {(p, q): complex(re, im) for p, q, re, im in entries}


# Pre-load coefficient dictionaries for fast access
_COEFFS: Dict[Tuple[int, str], Dict[Tuple[int, int], complex]] = {}

for _m in _MULTS_WITH_TABLE:
    _COEFFS[(_m, "hi")] = _load_coeff(_m, "hi")
    _COEFFS[(_m, "lo")] = _load_coeff(_m, "lo")

# -----------------------------------------------------------------------------
# Plaintext cache per engine id and multiplier
# -----------------------------------------------------------------------------

# key = (engine_id, mult_val, which)
_PT_CACHE: Dict[Tuple[int, int, str], Dict[Tuple[int, int], Any]] = {}


# Updated helper takes multiplier value
def _get_coeff_plaintexts(engine, mult_val: int, which: str):
    """Return dict[(p,q)] -> plaintext for given engine & multiplier."""
    cache_key = (id(engine), mult_val, which)
    if cache_key in _PT_CACHE:
        return _PT_CACHE[cache_key]

    coeffs = _COEFFS[(mult_val, which)]
    slot_cnt = engine.slot_count
    pt_dict: Dict[Tuple[int, int], Any] = {}
    for (p, q), c in coeffs.items():
        vec = np.full(slot_cnt, c, dtype=np.complex128)
        pt_dict[(p, q)] = engine.encode(vec)
    _PT_CACHE[cache_key] = pt_dict
    return pt_dict

# -----------------------------------------------------------------------------
# Evaluation helper
# -----------------------------------------------------------------------------

# Generic polynomial evaluator for a given multiplier (must have coeff table)
def _poly_eval(
    context: CKKS_EngineContext,
    ct_hi: Any,
    ct_lo: Any,
    mult_val: int,
    which: str,
):
    engine = context.get_engine()
    rlk = context.get_relinearization_key()
    conj_key = context.get_conjugation_key()

    # power basis X^p, Y^q
    basis_x = build_power_basis(engine, ct_hi, rlk, conj_key)  # 0..15
    basis_y = build_power_basis(engine, ct_lo, rlk, conj_key)

    coeff_pt = _get_coeff_plaintexts(engine, mult_val, which)

    # init zero cipher
    cipher_res = engine.multiply(ct_hi, 0.0)

    for (p, q), pt in coeff_pt.items():
        term = engine.multiply(basis_x[p], basis_y[q], rlk)
        term = engine.multiply(term, pt)
        cipher_res = engine.add(cipher_res, term)

    return cipher_res

# -----------------------------------------------------------------------------
# Public API – generic interface for GF multipliers
# -----------------------------------------------------------------------------

# Exported symbols
__all__ = [
    "gf_mul_2",
    "gf_mul_3",
    "gf_mul_9",
    "gf_mul_11",
    "gf_mul_13",
    "gf_mul_14",
]


def _gf_mul_generic(mult_val: int, context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any):
    """Generic GF multiplication by mult_val (2,3,9,11,13,14)."""

    if mult_val not in _MULTS_WITH_TABLE:
        raise ValueError(f"Unsupported multiplier {mult_val}")

    hi_ct = _poly_eval(context, ct_hi, ct_lo, mult_val, "hi")
    lo_ct = _poly_eval(context, ct_hi, ct_lo, mult_val, "lo")
    return hi_ct, lo_ct


# Concrete wrappers -----------------------------------------------------------


def gf_mul_2(context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any):
    return _gf_mul_generic(2, context, ct_hi, ct_lo)


def gf_mul_3(context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any):
    return _gf_mul_generic(3, context, ct_hi, ct_lo)


def gf_mul_9(context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any):
    return _gf_mul_generic(9, context, ct_hi, ct_lo)


def gf_mul_11(context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any):
    return _gf_mul_generic(11, context, ct_hi, ct_lo)


def gf_mul_13(context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any):
    return _gf_mul_generic(13, context, ct_hi, ct_lo)


def gf_mul_14(context: CKKS_EngineContext, ct_hi: Any, ct_lo: Any):
    return _gf_mul_generic(14, context, ct_hi, ct_lo)


# -----------------------------------------------------------------------------
# Test functions
# -----------------------------------------------------------------------------


gf_mult_2 = np.array([
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
], dtype=np.uint8)

gf_mult_3 = np.array([
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
], dtype=np.uint8)
    
gf_mult_9 = np.array([
    0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
    0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
    0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
    0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
    0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
    0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
    0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
    0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
    0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
    0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
    0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
    0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
    0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
    0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
    0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
    0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
], dtype=np.uint8)

gf_mult_11 = np.array([
    0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
    0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
    0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
    0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
    0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
    0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
    0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
    0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
    0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
    0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
    0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
    0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
    0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
    0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
    0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
    0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
], dtype=np.uint8)

gf_mult_13 = np.array([
    0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
    0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
    0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
    0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
    0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
    0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
    0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
    0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
    0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
    0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
    0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
    0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
    0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
    0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
    0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
    0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
], dtype=np.uint8)

gf_mult_14 = np.array([
    0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
    0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
    0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
    0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
    0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
    0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
    0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
    0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
    0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
    0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
    0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
    0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
    0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
    0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
    0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
    0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
], dtype=np.uint8)

# -----------------------------------------------------------------------------
# Lookup-table helpers for plaintext GF multiplication (simulation / testing)
# -----------------------------------------------------------------------------

# Map each multiplier to its pre-computed numpy table.
_GF_MULT_TABLES = {
    2: gf_mult_2,
    3: gf_mult_3,
    9: gf_mult_9,
    11: gf_mult_11,
    13: gf_mult_13,
    14: gf_mult_14,
}


def gf_mult_lookup(input_array, k: int):
    """Return ``input_array × k`` in GF(2^8) using the pre-computed table.

    Parameters
    ----------
    input_array : np.ndarray | list[int]
        Values 0-255.
    k : {2,3,9,11,13,14}
        Multiplier constant.
    """
    table = _GF_MULT_TABLES.get(k)
    if table is None:
        raise ValueError(f"Unsupported multiplier {k}. Must be one of {sorted(_GF_MULT_TABLES)}.")

    arr = np.asarray(input_array, dtype=np.uint8)
    return table[arr]

def int_to_zeta(arr: np.ndarray) -> np.ndarray:
    result = np.exp(-2j * np.pi * (arr % 16) / 16)
    return result

def zeta_to_int(zeta_arr: np.ndarray) -> np.ndarray:
    """Inverse of `transform_to_zeta` assuming unit-magnitude complex numbers.

    Values are mapped back to integers 0‥15 by measuring their phase.
    """
    angles = np.angle(zeta_arr)  # range (-π, π]
    k      = (-angles * 16) / (2 * np.pi)
    k      = np.mod(np.rint(k), 16).astype(np.uint8)
    return k

if __name__ == "__main__":
    engine_context = CKKS_EngineContext(signature=1, use_bootstrap=True, mode="parallel", thread_count=16, device_id=0)
    engine = engine_context.engine
    public_key = engine_context.public_key
    secret_key = engine_context.secret_key
    relinearization_key = engine_context.relinearization_key
    conjugation_key = engine_context.conjugation_key
    bootstrap_key = engine_context.bootstrap_key
    
    # 1. Encrypt inputs
    np.random.seed(42)
    alpha_int = np.random.randint(0, 16, size=32768, dtype=np.uint8)
    beta_int = np.random.randint(0, 16, size=32768, dtype=np.uint8)
    alpha_int_16 = alpha_int[:16]
    beta_int_16 = beta_int[:16]
    
    # 1-1. gf_mult_2 of alpha << 4 | beta int
    alpha_beta_int = (alpha_int_16 << 4) | beta_int_16
    alpha_beta_int_gf_mult_2 = gf_mult_lookup(alpha_beta_int, 2)
    
    # 1-2. gf_mult_3 of alpha << 4 | beta int
    alpha_beta_int_gf_mult_3 = alpha_beta_int_gf_mult_2 ^ alpha_beta_int
    
    
    print(f"alpha_beta_int_gf_mult_2[:16]: {alpha_beta_int_gf_mult_2[:16]}")
    print(f"alpha_beta_int_gf_mult_3[:16]: {alpha_beta_int_gf_mult_3[:16]}")
    
    # 2. transform to zeta domain
    alpha_int_zeta = int_to_zeta(alpha_int)
    beta_int_zeta = int_to_zeta(beta_int)
    
    enc_alpha_int_zeta = engine.encrypt(alpha_int_zeta, public_key, level=10)
    enc_beta_int_zeta = engine.encrypt(beta_int_zeta, public_key, level=10)
    
    # start_time = time.time()
    # print("start gf_mul_2.level", enc_alpha_int_zeta.level)
    # ct_hi, ct_lo = gf_mul_2(engine_context, enc_alpha_int_zeta, enc_beta_int_zeta)
    # print("after gf_mul_2.level", ct_hi.level)
    # end_time = time.time()
    # print(f"gf_mul_2 time: {end_time - start_time} seconds")
    
    ct_hi, ct_lo = gf_mul_2(engine_context, enc_alpha_int_zeta, enc_beta_int_zeta)
    ct_hi, ct_lo = gf_mul_2(engine_context, ct_hi, ct_lo)
    print("after gf_mul_2.level", ct_hi.level)
    
    bootstrapped_ct_hi_3 = engine.bootstrap(ct_hi, relinearization_key, conjugation_key, bootstrap_key)
    bootstrapped_ct_lo_3 = engine.bootstrap(ct_lo, relinearization_key, conjugation_key, bootstrap_key)
    
    print("booted doublegf_mul_2.level", bootstrapped_ct_hi_3.level)

    
    
    start_time = time.time()
    print("start gf_mul_3.level", enc_alpha_int_zeta.level)
    
    ct_hi, ct_lo = gf_mul_2(engine_context, enc_alpha_int_zeta, enc_beta_int_zeta)
    
    print("right after gf_mul_2.level", ct_hi.level)
    
    ct_hi_3 = _xor_operation(engine_context, ct_hi, enc_alpha_int_zeta)
    bootstrapped_ct_hi_3 = engine.bootstrap(ct_hi_3, relinearization_key, conjugation_key, bootstrap_key)
    
    ct_lo_3 = _xor_operation(engine_context, ct_lo, enc_beta_int_zeta)
    bootstrapped_ct_lo_3 = engine.bootstrap(ct_lo_3, relinearization_key, conjugation_key, bootstrap_key)
    
    print("booted gf_mul_3.level", bootstrapped_ct_hi_3.level)
    
    end_time = time.time()
    
    print(f"gf_mul_3 time: {end_time - start_time} seconds")
    
    start_time = time.time()
    
    dec_ct_hi = engine.decrypt(ct_hi, secret_key)
    dec_ct_lo = engine.decrypt(ct_lo, secret_key)
    
    dec_ct_hi_3 = engine.decrypt(ct_hi_3, secret_key)
    dec_ct_lo_3 = engine.decrypt(ct_lo_3, secret_key)
    
    int_dec_ct_hi = zeta_to_int(dec_ct_hi)
    int_dec_ct_lo = zeta_to_int(dec_ct_lo)
    
    int_dec_ct_hi_3 = zeta_to_int(dec_ct_hi_3)
    int_dec_ct_lo_3 = zeta_to_int(dec_ct_lo_3)
    
    print(int_dec_ct_hi[:16] * 16)
    print(int_dec_ct_lo[:16])
    
    print(int_dec_ct_hi_3[:16] * 16)
    print(int_dec_ct_lo_3[:16])

    
    
    